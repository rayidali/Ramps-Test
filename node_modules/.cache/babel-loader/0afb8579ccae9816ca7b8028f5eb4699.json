{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const cacheKey = getCacheKey(endpoint, params);\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }), [cache, wrappedRequest]);\n  const fetchWithoutCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const result = await fakeFetch(endpoint, params); // Update cache for paginatedTransactions and transactionsByEmployee\n\n    if (endpoint === \"setTransactionApproval\" && params && 'transactionId' in params) {\n      const transactionId = params.transactionId;\n      const newValue = params.value; // Update paginatedTransactions cache\n\n      const paginatedCacheKey = getCacheKey(\"paginatedTransactions\", {\n        page: 0\n      });\n      const paginatedCacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(paginatedCacheKey);\n\n      if (paginatedCacheResponse) {\n        const paginatedData = JSON.parse(paginatedCacheResponse);\n        const updatedData = paginatedData.data.map(transaction => transaction.id === transactionId ? { ...transaction,\n          approved: newValue\n        } : transaction);\n        cache === null || cache === void 0 ? void 0 : cache.current.set(paginatedCacheKey, JSON.stringify({ ...paginatedData,\n          data: updatedData\n        }));\n      } // Update transactionsByEmployee cache\n\n\n      const employeeCacheKeys = Array.from((cache === null || cache === void 0 ? void 0 : cache.current.keys()) || []).filter(key => key.startsWith(\"transactionsByEmployee\"));\n\n      for (const key of employeeCacheKeys) {\n        const employeeCacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(key);\n\n        if (employeeCacheResponse) {\n          const employeeData = JSON.parse(employeeCacheResponse);\n          const updatedEmployeeData = employeeData.map(transaction => transaction.id === transactionId ? { ...transaction,\n            approved: newValue\n          } : transaction);\n          cache === null || cache === void 0 ? void 0 : cache.current.set(key, JSON.stringify(updatedEmployeeData));\n        }\n      }\n    }\n\n    return result;\n  }), [cache, wrappedRequest]);\n  const clearCache = useCallback(() => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    cache.current = new Map();\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"j/MJvgyGdTYdw5q/fTHvRz37Zrc=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","fetchWithCache","endpoint","params","cacheKey","getCacheKey","cacheResponse","current","get","data","JSON","parse","result","set","stringify","fetchWithoutCache","transactionId","newValue","value","paginatedCacheKey","page","paginatedCacheResponse","paginatedData","updatedData","map","transaction","id","approved","employeeCacheKeys","Array","from","keys","filter","key","startsWith","employeeCacheResponse","employeeData","updatedEmployeeData","clearCache","undefined","Map","clearCacheByEndpoint","endpointsToClear","cacheKeys","clearKey","some","delete"],"sources":["/Users/rayidali/Documents/GitHub/Ramps-Test/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const cacheKey = getCacheKey(endpoint, params)\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  const fetchWithoutCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const result = await fakeFetch<TData>(endpoint, params)\n        \n        // Update cache for paginatedTransactions and transactionsByEmployee\n        if (endpoint === \"setTransactionApproval\" && params && 'transactionId' in params) {\n          const transactionId = (params as any).transactionId\n          const newValue = (params as any).value\n          \n          // Update paginatedTransactions cache\n          const paginatedCacheKey = getCacheKey(\"paginatedTransactions\", { page: 0 })\n          const paginatedCacheResponse = cache?.current.get(paginatedCacheKey)\n          if (paginatedCacheResponse) {\n            const paginatedData = JSON.parse(paginatedCacheResponse)\n            const updatedData = paginatedData.data.map((transaction: any) => \n              transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n            )\n            cache?.current.set(paginatedCacheKey, JSON.stringify({ ...paginatedData, data: updatedData }))\n          }\n\n          // Update transactionsByEmployee cache\n          const employeeCacheKeys = Array.from(cache?.current.keys() || [])\n            .filter(key => key.startsWith(\"transactionsByEmployee\"))\n          \n          for (const key of employeeCacheKeys) {\n            const employeeCacheResponse = cache?.current.get(key)\n            if (employeeCacheResponse) {\n              const employeeData = JSON.parse(employeeCacheResponse)\n              const updatedEmployeeData = employeeData.map((transaction: any) =>\n                transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n              )\n              cache?.current.set(key, JSON.stringify(updatedEmployeeData))\n            }\n          }\n        }\n        \n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current === undefined) {\n      return\n    }\n\n    cache.current = new Map<string, string>()\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}